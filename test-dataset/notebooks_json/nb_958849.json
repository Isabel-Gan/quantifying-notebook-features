{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "## Log file uploader\n",
    "# Reads log files (.xls) into a Pandas df, and writes\n",
    "# to a SQLlite local database using SQLAlchemy ORM\n",
    "# Rupert Thomas, Dec 2016\n",
    "\n",
    "# Setup enviroment\n",
    "%matplotlib inline\n",
    "\n",
    "import os\n",
    "import matplotlib\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Setup database\n",
    "import sys\n",
    "import sqlalchemy\n",
    "from sqlalchemy import Column, Integer, String, Float\n",
    "from sqlalchemy.ext.declarative import declarative_base\n",
    "from sqlalchemy import create_engine\n",
    "from sqlalchemy.orm import sessionmaker\n",
    "\n",
    "Base = declarative_base()\n",
    " \n",
    "# Set the path to the database\n",
    "PATH = os.getcwd()\n",
    "db_path = 'sqlite:///' + PATH + '/logDB.db'\n",
    " \n",
    "DBSessionFactory = None     # Session factory, created later\n",
    "session = None       # Current session, created on demand\n",
    "\n",
    "tableToWriteTo = 'loggerReadings'\n",
    "\n",
    "class reading(Base):\n",
    "    __tablename__ = 'loggerReadings'\n",
    "    id = Column(Integer, primary_key=True)\n",
    "    Time = Column(String(20),nullable=True)\n",
    "    Temp_degC  = Column(Float,nullable=True)\n",
    "    Hum_pcRH  = Column(Float,nullable=True)\n",
    "    DP_degC  = Column(Float,nullable=True)\n",
    "\n",
    "    def __repr__(self):\n",
    "        return \"(id='%s', Time='%s', Temp_degC='%s', Hum_pcRH='%s', DP_degC='%s')\" % (self.id, self.Time, self.Temp_degC, self.Hum_pcRH, self.DP_degC)\n",
    "\n",
    "if not os.path.exists(db_path):\n",
    "    # DB does not exist, create a new one\n",
    "    engine = create_engine(db_path)\n",
    "    Base.metadata.create_all(engine)\n",
    "else:\n",
    "    # All good - just create the engine\n",
    "    engine = create_engine(db_path)\n",
    "    \n",
    "conn = engine.connect()\n",
    "\n",
    "# Bind the engine to the metadata of the Base class so that the\n",
    "# declaratives can be accessed through a DBSessionFactory instance\n",
    "Base.metadata.bind = engine\n",
    "\n",
    "if not DBSessionFactory:   \n",
    "    # Create the session factory\n",
    "    DBSessionFactory = sessionmaker(bind=engine)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Functionalise DB Insert\n",
    "def writeToDB(inputDF):\n",
    "    # The orient='records' is the key of this, it allows to align with the format mentioned in the doc to insert in bulks.\n",
    "    listToWrite = inputDF.to_dict(orient='records')\n",
    "\n",
    "    metadata = sqlalchemy.schema.MetaData(bind=engine,reflect=True)\n",
    "    table = sqlalchemy.Table(tableToWriteTo, metadata, autoload=True)\n",
    "\n",
    "    # Open the session\n",
    "    session = DBSessionFactory()\n",
    "\n",
    "    # Inser the dataframe into the database in one bulk\n",
    "    conn.execute(table.insert(), listToWrite)\n",
    "\n",
    "    # Commit the changes\n",
    "    session.commit()\n",
    "\n",
    "    # Close the session\n",
    "    session.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING *** OLE2 inconsistency: SSCS size is 0 but SSAT size is non-zero\n",
      "Success: 20161211 Environmental Log.xls\n",
      "WARNING *** OLE2 inconsistency: SSCS size is 0 but SSAT size is non-zero\n",
      "Success: 20161001 Environmental Log.xls\n",
      "WARNING *** OLE2 inconsistency: SSCS size is 0 but SSAT size is non-zero\n",
      "Success: 20161008 Environmental Log.xls\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/rupert/anaconda3/envs/DataScience/lib/python3.5/site-packages/ipykernel/__main__.py:6: SADeprecationWarning: reflect=True is deprecate; please use the reflect() method.\n"
     ]
    }
   ],
   "source": [
    "# Find all XLS files\n",
    "listing = os.listdir()\n",
    "logFiles = [x for x in listing if x.endswith('Log.xls')]\n",
    "\n",
    "# Upload all\n",
    "filesToUpload = logFiles\n",
    "\n",
    "# # Upload latest\n",
    "# modTimes = [os.path.getmtime(logFile) for logFile in logFiles]\n",
    "# filesToUpload = logFiles[np.argmax(modTimes)]\n",
    "\n",
    "for file in filesToUpload:\n",
    "    df = pd.read_excel(file)\n",
    "    #df.head()\n",
    "\n",
    "    # Prep the current dataset for writing\n",
    "    d = {'Time' : df.Time,\n",
    "        'Temp_degC' : df['Temp(℃)'],\n",
    "        'Hum_pcRH' : df['Humi(%RH)'],\n",
    "        'DP_degC' : df['DP(℃)']\n",
    "        }\n",
    "    d = pd.DataFrame(d)\n",
    "\n",
    "    writeToDB(d)\n",
    "    \n",
    "    print('Success: ' + file)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
