{
 "metadata": {
  "name": "",
  "signature": "sha256:7be534c8afe1bbcbb480b1fa1b9796edf6ad7339b28ac2c393e9d2a2041e05fb"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "###This notebook includes Python tools for analyzing DHSVM outputs.\n",
      "Time series data are analyzed with **numpy** and **pandas** tools and plotted with **matplotlib**. Spatial maps are analyzed and plotted using **netCDF4** and **Basemap** utilities. In general, the scripts that needs to be changed (eg. file path, locations, time range, and variables to plot, etc) are on top of the coding block if there's any. However, differences in the input data may require changing the code, such as which columns to read as the dates, how many rows to skip as the header, etc. Currently all input file paths are absolute paths so you should be able to run the code as it is and plot from my output files. All plots are saved into a pdf page (specify the file name in the second code block). Note that you'll have to run the last code block to close the pdf file you opened in order to view the file correctly. "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%pylab inline"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Populating the interactive namespace from numpy and matplotlib\n"
       ]
      }
     ],
     "prompt_number": 1
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "**First**, import all necessary libraries."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Import all needed libraries \n",
      "import sys, os, datetime, time\n",
      "import numpy as np\n",
      "import pandas as pd\n",
      "import numpy.ma as ma\n",
      "import math\n",
      "import matplotlib.dates as dates\n",
      "import matplotlib.ticker as ticker\n",
      "import matplotlib.pyplot as plt\n",
      "from matplotlib.backends.backend_pdf import PdfPages\n",
      "from scipy.stats import norm\n",
      "from scipy import stats\n",
      "\n",
      "import os\n",
      "os.getcwd() \n",
      "os.chdir(\"D:\\\\Dropbox\\\\Python_Scripts\")\n",
      "os.getcwd()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 2,
       "text": [
        "'D:\\\\Dropbox\\\\Python_Scripts'"
       ]
      }
     ],
     "prompt_number": 2
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Read the input **streamflow** files (change the path if needed)<br>\n",
      "<span style=\"background-color: #FFFF00\">**<span style=\"color:#f00\">Attention</span>**: the last date in obs. file **MUST NOT** exceed the last date of sim.</span>"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "basin_name = \"Swamp\"\n",
      "basin_nameL = \"swamp\"\n",
      "mainpath = 'D:\\\\Dropbox\\\\Python_Scripts\\\\'+str(basin_name)\n",
      "print \"mainpath is:\", mainpath\n",
      "print \"\"\n",
      "\n",
      "# Enter file path for sim. and obs. flow files\n",
      "simflowpath = str(mainpath)+'\\\\daily_flow.txt'\n",
      "obsflowpath = str(mainpath)+'\\\\streamflow.12127100.cms.txt'\n",
      "\n",
      "# Read flow sim and obs dates &  data\n",
      "simflowdata = np.genfromtxt(simflowpath, usecols=[1])\n",
      "obsflowdata = np.genfromtxt(obsflowpath, usecols=[1])\n",
      "tempsimflowdate = np.genfromtxt(simflowpath, dtype = str, skiprows = 0, usecols = 0)\n",
      "tempobsflowdate = np.genfromtxt(obsflowpath, dtype = str, skiprows = 0, usecols = 0)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 3
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "**Sort** and **match** the obs. and sim. flow files based on dates.<br>"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Convert the string format dates into a datetime object\n",
      "simflowdate = []\n",
      "for i in range(len(tempsimflowdate)):\n",
      "    simflowdate.append(datetime.datetime.strptime(tempsimflowdate[i],'%m/%d/%Y'))\n",
      "# sort the dates in an acending order\n",
      "simflowdate.sort()\n",
      "\n",
      "# Convert the string format dates into a datetime object\n",
      "obsflowdate = []\n",
      "for i in range(len(tempobsflowdate)):\n",
      "    obsflowdate.append(datetime.datetime.strptime(tempobsflowdate[i],'%Y-%m-%d'))\n",
      "# sort the dates in an acending order\n",
      "obsflowdate.sort()\n",
      "\n",
      "# extract the matching dates from both arrays and mark them by mask\n",
      "# searchsorted(t1,t2) finds index in t1 for every value in t2:    \n",
      "idx_flow = np.searchsorted(simflowdate, obsflowdate, side='right')-1\n",
      "j2 = [i for i in idx_flow if i > 0]\n",
      "\n",
      "# mask the array as true if \n",
      "mask_flow = idx_flow >=0\n",
      "\n",
      "# compare the obs. and sim. time series\n",
      "df = pd.DataFrame({\"simflowdate\":tempsimflowdate[idx_flow][mask_flow], \"simflow\":simflowdata[idx_flow][mask_flow], \\\n",
      "                   \"obsflow\":obsflowdata[mask_flow], \"obsflowdate\":tempobsflowdate[mask_flow]})\n",
      "\n",
      "#print df\n",
      "#print df.values"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 4
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Read the input **water quality**files (change the path if needed)<br>\n",
      "<span style=\"background-color: #FFFF00\">**<span style=\"color:#f00\">Attention</span>**: the last date in obs. file **MUST NOT** exceed the last date of sim.</span>"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Initialize a pdf file for saving all the figures\n",
      "# pdfpages = PdfPages('test_figure.pdf')\n",
      "\n",
      "# Enter file path for swater quality simulation files\n",
      "simsedfilepath = str(mainpath)+'\\\\output\\\\Sed.Flow.Only'\n",
      "simotherfilepath = str(mainpath)+'\\\\Other.Conc.Only'\n",
      "simOrgPfilepath = str(mainpath)+'\\\\OrgP.Conc.Only'\n",
      "simSolPfilepath = str(mainpath)+'\\\\solP.Conc.Only'\n",
      "\n",
      "# Enter file path for observed water quality variable files\n",
      "obsfilepath = str(mainpath)+'\\\\'+str(basin_nameL)+'-time-stamped-calibrated.txt'\n",
      "\n",
      "# Enter file path for observed precipitation files\n",
      "precipfilepath = str(mainpath)+'\\\\Mass.Balance'\n",
      "\n",
      "# Read dates of sims (continuous)\n",
      "tempsimdates = np.genfromtxt(simsedfilepath, dtype=str, skiprows=2, usecols=0)\n",
      "\n",
      "# Read dates of obs (discrete). Use the 2nd column\n",
      "tempobsdates = np.genfromtxt(obsfilepath, dtype=str, skiprows=1, usecols=0)\n",
      "\n",
      "# Read sediment sims (use the 2nd col)\n",
      "simseddata = np.genfromtxt(simsedfilepath, skiprows=2, usecols=[2])\n",
      "simseddata = simseddata + 1.2\n",
      "# Read sediment obs.\n",
      "# Skip the first line, and use the 5th column for sed\n",
      "obsseddata = np.genfromtxt(obsfilepath, dtype=float, skiprows=1, usecols=[2])\n",
      "\n",
      "# Read other data\n",
      "simotherdata = np.genfromtxt(simotherfilepath, skiprows=2, usecols=[1])\n",
      "simotherdata = simotherdata/0.01444+15\n",
      "print len(simotherdata)\n",
      "#print simotherdata\n",
      "obsotherdata = np.genfromtxt(obsfilepath, dtype=float, skiprows=1, usecols=[1])\n",
      "obsotherdata = obsotherdata;\n",
      "\n",
      "# Read obs. precipitation data\n",
      "precipdata = np.genfromtxt(precipfilepath, dtype=float, skiprows=24, usecols=[9])\n",
      "print len(precipdata)\n",
      "\n",
      "# Read P (phosphorous) data\n",
      "simOrgnPdata = np.genfromtxt(simOrgPfilepath, skiprows=2, usecols=[1])\n",
      "simSolPdata = np.genfromtxt(simSolPfilepath, skiprows=2, usecols=[1])\n",
      "simTPdata = simOrgnPdata + simSolPdata\n",
      "obsTPdata = np.genfromtxt(obsfilepath, dtype=float, skiprows=1, usecols=[6])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "56256\n",
        "56256"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "**Third**, find out the dates when both sims and obs (discontinous) are available.\n",
      "\n",
      "<span style=\"background-color: #FFFF00\">**Particular attention** needs to be paid on **<span style=\"color:#f00\">np.searchsorted()</span>**. Output all matching columns to make sure its the right match. Right now, the option **side='right'** must be used in the case of **daily time step (mm/dd/yy)** to avoid the 1-day mismatch. Later when working with **3-hourly set**, this may not hold.</span>"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#######dates###########\n",
      "simdates = []\n",
      "Fsimdate = []\n",
      "Fobsdate = []\n",
      "########sediment#######\n",
      "FsimSed = []\n",
      "FsimSedPre = []\n",
      "FsimSedPost = []\n",
      "FobsSed = []\n",
      "########coliform#######\n",
      "FsimOther = []\n",
      "FsimOtherPre = []\n",
      "FsimOtherPost = []\n",
      "FobsOther = []\n",
      "######phosphorous######\n",
      "FsimTP = []\n",
      "FsimTPPre = []\n",
      "FsimTPPost = []\n",
      "FobsTP = []\n",
      "#######################\n",
      "\n",
      "# construct the sim. date obj.\n",
      "for i in range(len(tempsimdates)):\n",
      "    simdates.append(datetime.datetime.strptime(tempsimdates[i],'%m/%d/%Y-%H:%M:%S'))\n",
      "simdates.sort()\n",
      "# construct the obs. date obj.\n",
      "obsdates = []\n",
      "for i in range(len(tempobsdates)):\n",
      "    obsdates.append(datetime.datetime.strptime(tempobsdates[i],'%m/%d/%Y-%H:%M:%S'))\n",
      "obsdates.sort()\n",
      "\n",
      "\n",
      "for i in range(len(obsdates)):\n",
      "    obs = dates.date2num(obsdates[i])\n",
      "    junk = date2num(simdates)\n",
      "    #value = obsdates[i]\n",
      "    idx = (np.abs(junk-obs)).argmin()\n",
      "    if (idx-1 > 0 and (idx+1)< len(simdates)):\n",
      "      Fsimdate.append(simdates[idx])\n",
      "      Fobsdate.append(obsdates[i])\n",
      "      #\n",
      "      FsimSed.append(simseddata[idx])\n",
      "      FsimSedPre.append(simseddata[idx-1])\n",
      "      FsimSedPost.append(simseddata[idx+1])\n",
      "      FobsSed.append(obsseddata[i])\n",
      "      #\n",
      "      FobsOther.append(obsotherdata[i])\n",
      "      FsimOther.append(simotherdata[idx])\n",
      "      FsimOtherPre.append(simotherdata[idx-1])\n",
      "      FsimOtherPost.append(simotherdata[idx+1])\n",
      "      #\n",
      "      FobsTP.append(obsTPdata[i])\n",
      "      FsimTP.append(simTPdata[idx])\n",
      "      FsimTPPre.append(simTPdata[idx-1])\n",
      "      FsimTPPost.append(simTPdata[idx+1])\n",
      "\n",
      "# unit conversion (divide by 1000)\n",
      "for i in range(len(FsimOther)):\n",
      "    FsimOther[i]= FsimOther[i]/1000\n",
      "    FobsOther[i] = FobsOther[i]/1000\n",
      "    FsimOtherPost[i] = FsimOtherPost[i]/1000 \n",
      "    FsimOtherPre[i] = FsimOtherPre[i]/1000 \n",
      "\n",
      "#for i in range(len(FsimSed)):\n",
      "    #print Fsimdate[i], FsimSed[i], FobsSed[i], FsimOther[i], FobsOther[i]\n",
      "    #print Fsimdate[i], FsimOther[i], FsimOtherPre[i], FsimOtherPost[i], Fobsdate[i], FobsOther[i]\n",
      "    #print Fsimdate[i], FsimTP[i], Fobsdate[i], FobsTP[i]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 6
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Compute <b><span style=\"color:#f00\">R<sup>2</sup></span></b> between sim. and obs. sediment"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# average of sim\n",
      "sim_mean= sum(FsimSed)/float(len(FsimSed))\n",
      "\n",
      "print \"sim_mean = \", sim_mean\n",
      "obs_mean= sum(FobsSed)/float(len(FobsSed))\n",
      "\n",
      "# total sum of squares \n",
      "ss_tot = sum((x-obs_mean)**2 for x in FobsSed) \n",
      "\n",
      "# sum of squares of residuals\n",
      "ss_err = sum((y-x)**2 for y,x in zip(FsimSed,FobsSed))\n",
      "nash_sed = 1 - (ss_err/ss_tot)\n",
      "print \"nash_sed = \", nash_sed\n",
      "\n",
      "gradient, intercept, r_value, p_value, std_err = stats.linregress(FsimSed,FobsSed)\n",
      "r2_sed = r_value**2\n",
      "print \"Sediment R-squared = \", r2_sed\n",
      "if gradient <= 1:\n",
      "  adj_r2_sed = gradient * (r_value**2)\n",
      "  print \"adj_r2_sed =\", adj_r2_sed\n",
      "if gradient > 1:\n",
      "  adj_r2_sed = gradient**(-1) * (r_value**2)\n",
      "  print \"adj_r2_sed =\", adj_r2_sed"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "sim_mean =  3.73954049451\n",
        "nash_sed =  0.515286559513\n",
        "Sediment R-squared =  0.618345747489\n",
        "adj_r2_sed = 0.471466153617\n"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Compute <b><span style=\"color:#f00\">R<sup>2</sup></span></b> between sim. and obs. coliform"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# average of sim\n",
      "sim_mean= sum(FsimOther)/float(len(FsimOther))\n",
      "obs_mean= sum(FobsOther)/float(len(FobsOther))\n",
      "\n",
      "# total sum of squares \n",
      "ss_tot = sum((x-obs_mean)**2 for x in FobsOther) \n",
      "# sum of squares of residuals\n",
      "ss_err = sum((y-x)**2 for y,x in zip(FsimOther,FobsOther))\n",
      "\n",
      "\n",
      "nash_col = 1 - (ss_err/ss_tot)\n",
      "print \"nash_col= \", nash_col\n",
      "\n",
      "gradient, intercept, r_value, p_value, std_err = stats.linregress(FsimOther,FobsOther)\n",
      "r2_col = r_value**2\n",
      "print \"R-squared = \", r2_col\n",
      "if gradient <= 1:\n",
      "  adj_r2_col = gradient * (r_value**2)\n",
      "  print \"adj_r2_col =\", adj_r2_col\n",
      "if gradient > 1:\n",
      "  adj_r2_col = gradient**(-1) * (r_value**2)\n",
      "  print \"adj_r2_col =\", adj_r2_col\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "nash_col=  -0.452930563156\n",
        "R-squared =  0.488590657889\n",
        "adj_r2_col = 0.20839150512\n"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Compute <b><span style=\"color:#f00\">R<sup>2</sup></span></b> between sim. and obs. Total Phosphorous"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sim_mean= sum(FsimTP)/float(len(FsimTP))\n",
      "obs_mean= sum(FobsTP)/float(len(FobsTP))\n",
      "\n",
      "# total sum of squares \n",
      "ss_tot = sum((x-obs_mean)**2 for x in FobsTP) \n",
      "# sum of squares of residuals\n",
      "ss_err = sum((y-x)**2 for y,x in zip(FsimTP,FobsTP))\n",
      "\n",
      "nash_TP = 1 - (ss_err/ss_tot)\n",
      "print \"nash_TP= \", nash_TP\n",
      "\n",
      "gradient, intercept, r_value, p_value, std_err = stats.linregress(FsimTP, FobsTP)\n",
      "r2_TP = r_value**2\n",
      "print \"R-squared = \", r2_TP\n",
      "if gradient <= 1:\n",
      "  adj_r2_TP = gradient * (r_value**2)\n",
      "  print \"adj_r2_TP =\", adj_r2_TP\n",
      "if gradient > 1:\n",
      "  adj_r2_TP = gradient**(-1) * (r_value**2)\n",
      "  print \"adj_r2_TP =\", adj_r2_TP"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "nash_TP=  -0.571265931824\n",
        "R-squared =  0.190209637846\n",
        "adj_r2_TP = 0.0634992272314\n"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Plot the **Sim** vs. **obs** monthly **sediment conc**"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ssim = pd.Series(FsimSed, index=Fsimdate)\n",
      "sobs = pd.Series(FobsSed, index=Fobsdate)\n",
      "\n",
      "fig=plt.figure(figsize=(12,5),dpi=400)\n",
      "ax = plt.subplot()\n",
      "fig.text(0.7, 0.8, r'$R^2=%.2f$' % r2_sed, fontsize=16)\n",
      "#fig.text(0.87, 0.85, \"A\", fontsize=18)\n",
      "title('sediment concentration (calibration, 2002-2008)' , fontsize=14., y=1.05, fontweight='bold')\n",
      "plt.ylabel('conc. (mg/l)', fontsize=14.)\n",
      "plt.xlabel('year', fontsize=14.)\n",
      "plt.tick_params(axis='both', which='major', labelsize=14)\n",
      "\n",
      "# s=square, -=dash, g^=triangle\n",
      "ssim['2002':'2008'].plot(label='Sim', color ='red', linewidth=2)\n",
      "#sobs['1993':'2009'].plot(label='Obs', style='o', markersize=4)\n",
      "sobs['2002':'2008'].plot(label='Obs', color ='blue', style='-o', markersize=4)\n",
      "#sobs['1993':'2009'].plot(label='Obs', color ='blue', style='-o',fontsize=14,markersize=2)\n",
      "pylab.ylim([0,100])\n",
      "\n",
      "# Plot the error bar for selected data (greater values than a threshold)\n",
      "c = []\n",
      "d = []\n",
      "e = []\n",
      "f = []\n",
      "for i in range(len(FsimSed)):\n",
      "    if (FsimSed[i] > 30 or FobsSed[i] > 30):\n",
      "        f.append(Fsimdate[i])\n",
      "        c.append(FsimSed[i])\n",
      "        d.append(FsimSedPost[i]) \n",
      "        e.append(FsimSedPre[i])\n",
      "a = c - pd.DataFrame([d, c, e]).min()\n",
      "b = pd.DataFrame([d, c, e]).max() - c\n",
      "\n",
      "errorbar(f, c, yerr=[a, b], fmt=None, ecolor='grey', lw=8, capsize=3, capthick=2)\n",
      "\n",
      "grid(True)\n",
      "#tight_layout()\n",
      "ax.legend(loc='best')\n",
      "\n",
      "outputfilepath = str(mainpath) + '\\\\sed_calibration.png'\n",
      "savefig(str(outputfilepath),dpi=500,format = 'png',transparent='True')\n",
      "\n",
      "##############################################################################################\n",
      "#########################################Plot the CDF#########################################\n",
      "##############################################################################################\n",
      "fig=plt.figure(figsize=(7,5),dpi=400)\n",
      "ax = plt.subplot()\n",
      "n = len(sobs)\n",
      "# log-normal probability plot\n",
      "d = np.linspace(1, n, num=n)/(n+1)\n",
      "y  = norm.ppf(d,0,1);\n",
      "\n",
      "\n",
      "junk = FsimSed \n",
      "nn = len(junk)\n",
      "dd = np.linspace(1, nn, num=nn)/(nn+1)\n",
      "yy  = norm.ppf(dd,0,1);\n",
      "\n",
      "# create the axis ticks\n",
      "p  = [0.001, 0.01, 0.05, 0.2, 0.5, 0.75, 0.90, 0.98, 0.999];\n",
      "# relate var \"p\" with \"y\"\n",
      "tick  = norm.ppf(p,0,1);\n",
      "label = ['0.001','0.01','0.05','0.2','0.5','0.75','0.90','0.98','0.999'];\n",
      "# recast the p to (0,1)\n",
      "\n",
      "# sort the data in an ascending order\n",
      "ssim.sort()\n",
      "sobs.sort()\n",
      "junk.sort()\n",
      "# plot with simulation points that align with the obs\n",
      "#ax.plot(y, ssim, 'r+', label='sim')\n",
      "# plot with all points within 9-hour interval of obs collection time.\n",
      "ax.plot(yy, junk, 'r+', label='sim')\n",
      "ax.plot(y, sobs,'b*', label='obs')\n",
      "\n",
      "# use numpoints option so the markeres don't appear twice in one legend\n",
      "ax.legend(loc=(0.05,0.8),numpoints = 1)\n",
      "plt.ylabel('conc. (mg/l)', fontsize=12.)\n",
      "plt.xlabel('cumulative prob.', fontsize=12.)\n",
      "ax = gca()\n",
      "ax.xaxis.set_major_locator(ticker.FixedLocator(tick))\n",
      "ax.xaxis.set_major_formatter(ticker.FixedFormatter(label))\n",
      "grid(True)\n",
      "\n",
      "# save the figure to the folder\n",
      "outputfilepath = str(mainpath) + '\\\\sed_calibration_cdf.png'\n",
      "savefig(str(outputfilepath),dpi=500,format = 'png',transparent='True')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nqddDAZRsi4iIiEgC++qrr5gzZw4bN24EYP369Tz//PMce+yxUd3ePZVfPKY2VLItMaX+PO8pBv6g\nOHhPMfBed8fgqaee4g9/+APnn38+X375Zbfet1+lwusgPz+fjz/+mIkTJ5KXl8exxx5LcXExDzzw\nAECzVpJIbSXh10fapit0UhsRERFJePPnz2fIkCEUFRXxt7/9jTvuuEMJd4z5+aQ23aUzJ7VRZVti\nKhV7w/xGMfAHxcF7ioH3ujMGX3/9NU888QQAhxxyCOXl5d12336m14H3dAZJERER8bWnnnqKF198\nkbfeeosLLriAgw46iLq6OjZu3Mixxx7LzTffzHXXXdc0i8T777/PmWeeGdcx1dXVccsttzBgwAAa\nGxvZvn07999/Pz16tJ5arVmzhgcffJADDzyQxsZGJk6cyCmnnAJARUUFDz/8MI2NjXzxxRdMmjSJ\n2267rc39SWJQG4mIiIj43pNPPslNN93Erl27SE9PB6ChoYHjjjuOiRMn8sgjjwCwa9cuLrzwQp5/\n/nn69+8ft/Hccsst7Nu3r+l+f/KTn5CRkcF9990Xcfv169dz7rnnMn/+fAYMGMADDzzAn//8Z5Ys\nWYJlWVx77bU89NBD5OTkUFNTw5FHHskpp5zCww8/HLfH0FFqI1EbiYiIiCSphQsXctxxxzUl2gA9\nevTg4IMPbmqVaGxs5K677uLZZ5+Na6JdW1vL448/zkUXXdS0btq0aTz11FOt3ubmm2/me9/7HgMG\nDADgrLPO4re//S0Aq1at4v333+err74CIDs7m8svv5wnnniCurq6uD0O6R5KtiWm1BvmPcXAHxQH\n7ykG3otlDBYuXNhiZo3du3ezcOFCTj/9dAD+67/+i5/97GcMGjSI5557Lmb3He7LL79k7969jBw5\nsmnd0KFD2blzZ8SzD+7atYv/+Z//4eSTT25aN2bMGM444wwAMjMzqaioYOXKlU3X5+bmUl9fz549\ne7o0Vr0OvKdGIBEREfG11atXs3HjxmbJ9o4dO7jmmms477zzuPfee/nLX/7CLbfcwqxZswA46qij\n+N73vheX8axfvx4wCbEjPz8fgI0bN3LEEUc02/7jjz+msbGR8vJyPvvsMyorK6moqOCuu+4iOzub\noUOHsm3btma3Wbx4MePHj6dfv35xeQzSfZRsS0ylwnyefqcY+IPi4D3FwHuxisHChQvJysri888/\nZ+nSpXz00Ud8/vnnPPvssxQXFwOmjWPatGkd2m9DQwPXXXcd9fX17W578cUXN1Wiq6urAdPu4cjK\nygJg7969LW67fft2AJYtW8btt98OwOzZs7nmmmv405/+1GL7NWvW8PLLL/PWW2916PFEoteB95Rs\ni4iIiK8tXLiQ448/nh/+8IcAXHvttXz3u9/l6aef5sEHH+z0fnv06MHvf//7Dt+uT58+LdY5M6G4\nE3BHr169AJraXcBU3u+8807mzp1L3759m9bX1dVx1VVX8eSTTzJ58uQOj038Rz3bElPqDfOeYuAP\nioP3FAPvxSoGkfq1CwsLeeONN2Ky/44aMmQIYHrGHU5F++CDD26x/bBhwwCatYTk5ORgWRZr1qxp\ntu0NN9zATTfdFLMWGL0OjFmzZnH55Zd7ct+qbIuIiIhvlZeXs27duhbJ9r/+9S8GDx7cpX3X19fz\nwx/+sMNtJMXFxRxwwAGsWbOmadaTZcuWkZ+fT1FRUYvbjh8/noEDB1JRUcGIESMAk5ynp6c3JeIA\n9957L+eee27THOEvvvgiZ599Nnl5eV16nPFmWRYlJSUAFBUVdep057HYxzPPPMMDDzzAmjVr6NWr\nF+effz733HMPvXv3jvkp2DtC82yLiIiIb/3xj3/kuuuuY9euXWRkZDSt7927N+eccw7PPfccb731\nFieddBKZmZndNq7rr7+erKwsfve73wFw+eWXM2jQoKZ5tv/xj3/w17/+lSeeeIK0tLSmAzedn9df\nfz3V1dX893//N2ASxSVLlnDWWWc1zeP8wgsv8Mwzz3TbY2pPpDmmLcti+vTbmD9/PABnnlnGiy/e\n1aHkNhb7eOCBB7j//vv505/+xCmnnMKGDRu47rrr2LZtG++//z533303q1ev5tlnn416n5F0Zp5t\nJdsiIiLiO8uWLePRRx/ljTfeYOvWrVxxxRXccMMNjB49GoAnnniC559/nksuuYScnByuuOKKbh3f\nvn37uPHGGxk6dGjTGSQfeOCBpoR/7ty5zJ07l+XLl5OTk0MwGOSWW24hLc108DY0NHDPPfeQkZHB\nihUrOPzww1tU2E844QQWLlzYrY+rLZESzaVLlzJ5cilVVZcCkJ8/j0WLxjcduBqNru5jz549DBky\nhKeffpoLL7ywaf2+ffsYPnw49957L+vWraO0tJT09HRef/11Ro0axdNPP910H/feey+PPPIIe/bs\n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\n1uTuPIfWjY/Quc0KPvzqd44UXl/yjsb8OZ74uHTWbdtO5vL9FLneT9J0Vjx9gAzXKmMh4CEjvjoO\n9nyhXr/P6Ims/eEasCwGXLqJufPG+Vxn/erV9O67mbzDIzyfxVvX8fGmvEpN9fwkJ4c2KWwgjh41\nU4Du3OmTH8vKZ/7KomOFFvO/bMGri9uxYUd9buy7g5wdz/DFxvMA6N99GY8PH8Gmn2wsy/mZSYvy\nSvRos80mKyvNbw9ITnY2fPMN6a1aBdZFXFypV835vcxup8+ZZ5p35Cqfg5XZro+rfC8uRoqLydm6\nFSyL9JNOwoqLMx5w94/NZuZDCzOdrFu3nrPP3sDhwyYfWNYsBvZqSr8eLejZ4QDp7Q5w/fj/80mn\nYLEvL56f9iaR9e1P3Pe6lOTnEj2FkB/Wb9vmqeMAOqgIy5Yto0/37vDFF9FdsrccnkwRIWf7dqA0\njUf6Hm43CyyDVz4LF496ubwyWlZp3gr0iYnx7Fk6dqz0d2Fh8Dq/SROzyGAw+bKzfaaQ9CunP1z2\nSGUhgnXllVBz7WofhgHHgJHAKcBLwCGgjddxYbXOawPeI7ujMdhk/PjxlX6PqojzK++gl0D7CgtF\ntm4VWbxYZPRozzi82NhM6dPHLjfcIHLPPSK33+45sCpcPY4fP75cMoqIrFvnOeagvGko3GnnEhIy\nZcIEu8dUUeWRP5IyVpQXX3wxpFjN6hqzWlHZNm0SGTHCd+qzNm3scsUVIjfeWLF0HgpVUR5VhFDi\nSctKpxEZoFaJ6a+666AuoDqoGgji2a6JfAm86rXte+BJr23Rfu9VTnWouB999NEquU9lG0oVuX9F\nK8eK6tGlg/LIWFVpKNRR+lU1CLUyCDUvVOdnqahswYzJqkhrVVUelZfq0HCs7PRX3XVQF1AdVA0E\nMbZ9l+Sq3iQAPYBnvbZ/DARfb7wOYFkW8+aNcxuQc02VLHEbDVyrQFbH+5clW1l6ipQeyyNjVaWh\nUO5TkXdck6jOz1JR2czqdHNYvHg2gHNltmtKrl1XyqtAVEVer8xzFUUJjZpmbDcBYoFdXtt/x8Rv\n13miXXBud8a3KcEJxSAvrx4rqoOqSkPRTquVjeaF0BqWlZkGaoIONB8olY3qIPrUNDdCS+An4Dw8\nB0T+GxgOdHLbtg7oVnWiKYqiKIqiKHUUO3Cqvx01zbO9BygGmnttbw786rXN7wMriqIoiqIoSlVR\n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\nCv8PeNbpXZ2niewAAAAASUVORK5CYII=\n",
       "text": [
        "<matplotlib.figure.Figure at 0x3318860>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\nAABJRU5ErkJggg==\n",
       "text": [
        "<matplotlib.figure.Figure at 0xcfab630>"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ssim = pd.Series(FsimSed, index=Fsimdate)\n",
      "sobs = pd.Series(FobsSed, index=Fobsdate)\n",
      "\n",
      "fig=plt.figure(figsize=(12,5),dpi=400)\n",
      "ax = plt.subplot()\n",
      "fig.text(0.7, 0.8, r'$R^2=%.2f$' % r2_sed, fontsize=16)\n",
      "#fig.text(0.87, 0.85, \"A\", fontsize=18)\n",
      "title('sediment concentration (validation, 1993-2001)' , fontsize=14., y=1.05, fontweight='bold')\n",
      "plt.ylabel('conc. (mg/l)', fontsize=14.)\n",
      "plt.xlabel('year', fontsize=14.)\n",
      "plt.tick_params(axis='both', which='major', labelsize=14)\n",
      "plt.ylim([0, 200])\n",
      "# s=square, -=dash, g^=triangle\n",
      "ssim['1993':'2001'].plot(label='Sim', color ='red', linewidth=2)\n",
      "#sobs['1993':'2009'].plot(label='Obs', style='o', markersize=4)\n",
      "sobs['1993':'2001'].plot(label='Obs', color ='blue', style='-o', markersize=4)\n",
      "#sobs['1993':'2009'].plot(label='Obs', color ='blue', style='-o',fontsize=14,markersize=2)\n",
      "\n",
      "# Plot the error bar for selected data (greater values than a threshold)\n",
      "c = []\n",
      "d = []\n",
      "e = []\n",
      "f = []\n",
      "for i in range(len(FsimSed)):\n",
      "    if (FsimSed[i] > 30 or FobsSed[i] > 30):\n",
      "        f.append(Fsimdate[i])\n",
      "        c.append(FsimSed[i])\n",
      "        d.append(FsimSedPost[i]) \n",
      "        e.append(FsimSedPre[i])\n",
      "a = c - pd.DataFrame([d, c, e]).min()\n",
      "b = pd.DataFrame([d, c, e]).max() - c\n",
      "\n",
      "errorbar(f, c, yerr=[a, b], fmt=None, ecolor='grey', lw=8, capsize=3, capthick=2)\n",
      "\n",
      "grid(True)\n",
      "#tight_layout()\n",
      "ax.legend(loc='best')\n",
      "\n",
      "outputfilepath = str(mainpath) + '\\\\sed_validation.png'\n",
      "savefig(str(outputfilepath),dpi=500,format = 'png',transparent='True')\n",
      "##############################################################################################\n",
      "#########################################Plot the CDF#########################################\n",
      "##############################################################################################\n",
      "fig=plt.figure(figsize=(7,5),dpi=400)\n",
      "ax = plt.subplot()\n",
      "n = len(sobs)\n",
      "# log-normal probability plot\n",
      "d = np.linspace(1, n, num=n)/(n+1)\n",
      "y  = norm.ppf(d,0,1);\n",
      "\n",
      "\n",
      "junk = FsimSed + FsimSedPre + FsimSedPost\n",
      "nn = len(junk)\n",
      "dd = np.linspace(1, nn, num=nn)/(nn+1)\n",
      "yy  = norm.ppf(dd,0,1);\n",
      "\n",
      "# create the axis ticks\n",
      "p  = [0.001, 0.01, 0.05, 0.2, 0.5, 0.75, 0.90, 0.98, 0.999];\n",
      "# relate var \"p\" with \"y\"\n",
      "tick  = norm.ppf(p,0,1);\n",
      "label = ['0.001','0.01','0.05','0.2','0.5','0.75','0.90','0.98','0.999'];\n",
      "# recast the p to (0,1)\n",
      "\n",
      "# sort the data in an ascending order\n",
      "ssim.sort()\n",
      "sobs.sort()\n",
      "junk.sort()\n",
      "# plot with simulation points that align with the obs\n",
      "#ax.plot(y, ssim, 'r+', label='sim')\n",
      "# plot with all points within 9-hour interval of obs collection time.\n",
      "ax.plot(yy, junk, 'r+', label='sim')\n",
      "ax.plot(y, sobs,'b*', label='obs')\n",
      "\n",
      "# use numpoints option so the markeres don't appear twice in one legend\n",
      "ax.legend(loc=(0.05,0.8),numpoints = 1)\n",
      "plt.ylabel('conc. (mg/l)', fontsize=12.)\n",
      "plt.xlabel('cumulative prob.', fontsize=12.)\n",
      "plt.ylim([0, 200])\n",
      "ax = gca()\n",
      "ax.xaxis.set_major_locator(ticker.FixedLocator(tick))\n",
      "ax.xaxis.set_major_formatter(ticker.FixedFormatter(label))\n",
      "grid(True)\n",
      "\n",
      "# save the figure to the folder\n",
      "outputfilepath = str(mainpath) + '\\\\sed_validation_cdf.png'\n",
      "savefig(str(outputfilepath),dpi=500,format = 'png',transparent='True')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "ename": "TypeError",
       "evalue": "Empty 'Series': no numeric data to plot",
       "output_type": "pyerr",
       "traceback": [
        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
        "\u001b[1;32m<ipython-input-11-497d1ee105ff>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m     12\u001b[0m \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mylim\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m200\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     13\u001b[0m \u001b[1;31m# s=square, -=dash, g^=triangle\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 14\u001b[1;33m \u001b[0mssim\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'1993'\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;34m'2001'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'Sim'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcolor\u001b[0m \u001b[1;33m=\u001b[0m\u001b[1;34m'red'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlinewidth\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     15\u001b[0m \u001b[1;31m#sobs['1993':'2009'].plot(label='Obs', style='o', markersize=4)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     16\u001b[0m \u001b[0msobs\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'1993'\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;34m'2001'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'Obs'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcolor\u001b[0m \u001b[1;33m=\u001b[0m\u001b[1;34m'blue'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mstyle\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'-o'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmarkersize\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m4\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32mD:\\Tools\\Anaconda\\lib\\site-packages\\pandas\\tools\\plotting.pyc\u001b[0m in \u001b[0;36mplot_series\u001b[1;34m(series, label, kind, use_index, rot, xticks, yticks, xlim, ylim, ax, style, grid, legend, logx, logy, secondary_y, **kwds)\u001b[0m\n\u001b[0;32m   1827\u001b[0m                      secondary_y=secondary_y, **kwds)\n\u001b[0;32m   1828\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1829\u001b[1;33m     \u001b[0mplot_obj\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mgenerate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1830\u001b[0m     \u001b[0mplot_obj\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1831\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32mD:\\Tools\\Anaconda\\lib\\site-packages\\pandas\\tools\\plotting.pyc\u001b[0m in \u001b[0;36mgenerate\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    901\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mgenerate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    902\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_args_adjust\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 903\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_compute_plot_data\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    904\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_setup_subplots\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    905\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_make_plot\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;32mD:\\Tools\\Anaconda\\lib\\site-packages\\pandas\\tools\\plotting.pyc\u001b[0m in \u001b[0;36m_compute_plot_data\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    982\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mis_empty\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    983\u001b[0m             raise TypeError('Empty {0!r}: no numeric data to '\n\u001b[1;32m--> 984\u001b[1;33m                             'plot'.format(numeric_data.__class__.__name__))\n\u001b[0m\u001b[0;32m    985\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    986\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdata\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnumeric_data\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;31mTypeError\u001b[0m: Empty 'Series': no numeric data to plot"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n3udcc801nHvuuWyxxRYAfOMb3+DnP/85AB988AEvv/wy7733HgC9evXivPPOY/To0axatSq17VDb\nYSiXJEntwoQJE6isrGxQtnDhQiZMmMAxxxwDwK9+9SuuvvpqttxySx555JHU2jJlyhQWL17Mjjvu\nuLZs4MCBzJ8/n8mTJ69Tf8GCBTz++OMceeSRa8t22203jj32WAB69OhBTU0N77///trlffr0YfXq\n1SxatCi17VDb4SAlSZLU5k2bNo05c+Y0COXz5s3j4osv5uSTT+bGG2/kscce49prr6WqqgqA/fbb\nj3PPPTeV9syaNQsIwTm24YYbAjBnzhz23nvvBvVfe+01amtrmTFjBhMnTuSLL76gpqaGESNG0KtX\nLwYOHMhnn33W4Dmvv/46gwcPpl+/fqlsg9oWQ7kkSWrzJkyYQM+ePZk0aRJvvfUWr776KpMmTeKh\nhx5izz33BMLwkTPOOKNZ612zZg3Dhw9n9erVTdY966yz1vZsL1++HAjDTGI9e/YEYPHixes89/PP\nPwdg6tSpXH/99QDccMMNXHzxxTz44IPr1J8+fTpPPPEE48ePb9b2qP0ylEuSpDZvwoQJHHrooVx+\n+eUAXHLJJZx22mncd9993HbbbS1eb7du3bj77rub/byNN954nbJ45pdkUI/17dsXYO0wGwg9+T/5\nyU8YNWoUm2666dryVatWceGFF3LPPfdwyCGHNLttap8cUy5Jktq8QuPJ+/fvzzPPPJNJe7beemsg\njGmPxT3k22233Tr1t99+e4AGQ1F69+5NfX0906dPb1D3iiuu4Kqrrkpt6I3aJnvKJUlSmzZjxgxm\nzpy5Tih//vnn2WqrrVq17tWrV3P55Zc3e/jKnnvuyWabbcb06dPXzvIydepUNtxwQ4YMGbLOcwcP\nHsyAAQOoqalh0KBBQAjxXbt2XRvYAW688UZOOumktXOsP/rooxx//PFssMEGrdpOtX2GckmS1KZN\nmDCB3r17c8ABBzQo//TTT9lvv/0AGD9+PEcccQQ9evRo1rq7d+/eouErXbt25ayzzuKxxx7jwAMP\nBGDs2LFccskla9vw9NNP8+STTzJ69Gi6dOnCxRdfzLhx4zjooIMAeO655xg2bNja3vP777+fjz/+\nmL322otx48atXUdy2kV1XH55kCRJapOmTp3KXXfdxTPPPMPcuXM5//zzueKKK9hll10AGD16NGPH\njuXss8+md+/enH/++WVt39KlS7nyyisZOHDg2m/0vOWWW9aG8lGjRjFq1CjeeecdevfuTV1dHdde\ney1duoTRw2vWrGHkyJF0796dd999l6985Svr9NgfdthhTJgwoazbpeYrxZcHGcolSZKkVvAbPSVJ\nkqQOwFAuSZIkZcxQLkmSJGXMUC5JkiRlzFAuSZIkZcxQLkmSJGXMUC5JkiRlzFAuSZIkZcxQLkmS\nJGXMUC5JkiRlzFAuSZIkZcxQLkmSJGXMUC5JkiRlzFAuSZIkZcxQLkmSJGXMUC5JkiRlzFAuSZIk\nZcxQLkmSJGXMUC5JkiRlzFAuSZIkZcxQLkmSJGXMUC5JkiRlzFAuSZIkZcxQLkmSJGXMUC5JkiRl\nzFAuSZIkZcxQLkmSJGXMUC5JkiRlzFAuSZIkZazcofxw4PfAbKAOGJa3/P6oPHl7Ja9OT+BO4DNg\nCfA7YOvUWixJkiSlrNyhvA/wFvBdYDlQn7e8HhgPDEjcvpFXZxRwKnAWcBjQF/gj9vpLkiSpnepW\n5td7OrpB6BXPVwGsAmrW8/yNgG8DFwDPR2XnAR8BRwPPlqidkiRJUtm0td7leuBQYC7wHnA3sHli\n+b5AdxqG79nAO8DQMrVRkiRJKqly95Q3ZRzwBPAhsAMwAniBEMZXEYaz1ALz8p43F+hfvmZKkiRJ\npdPWQvmjiftvAxMJQ1OOB36bSYskSZKklLW1UJ7vE8LwlJ2ix58CXYHNaNhbPgB4sdAKqqqq1t6v\nrKyksrIyhWZKkiSps6iurqa6urqk66wo6dqaZzFwOfBgI3U2J4Ty7wAPEy70rCFc6Dk2qrMNoTf9\nOMLMLUn19fX5E7xIkiRJpVNRUQGtzNXl7invA+wc3e8CDAT2IvR6zwduAB4n9IhvD4wkjBePh64s\nBO4FbiKE8/nArcAU4LlybIAkSZJUauXuKa8kXLgJYaaV+PXvB4YDTwF7AxsThq68APwImJNYRw/g\nF8A5QG9CGB+eVydmT7kkSZJSVYqe8iyHr5SDoVySJEmpKkUob2vzlEuSJEmdjqFckiRJypihXJIk\nScqYoVySJEnKmKFckiRJypihXJIkScqYoVySJEnKmKFckiRJypihXJIkScqYoVySJEnKmKFckiRJ\nypihXJIkScqYoVySJEnKmKFckiRJypihXJIkScqYoVySJEnKmKFckiRJypihXJIkScqYoVySJEnK\n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\nlDFDuSRJkpQxQ7kkSZKUMUO5JEmSlDFDuSRJkpQxQ7kkSZKUMUO5JEmSlDFDuSRJkpQxQ7kkSZKU\nMUO5JEmSlDFDuSRJkpQxQ7kkSZKUMUO5JEmSlDFDuSRJkpQxQ7kkSZKUMUO5JEmSlDFDuSRJkpQx\nQ7kkSZKUMUO5JEmSlDFDuSRJkpQxQ7kkSZKUMUO5JEmSlDFDuSRJkpQxQ7kkSZKUMUO5JEmSlDFD\nuSRJkpQxQ7kkSZKUMUO5JEmSlDFDuSRJkpQxQ7kkSZKUMUO5JEmSlDFDuSRJkpQxQ7kkSZKUMUO5\nJEmSlDFDuSRJkpQxQ7kkSZKUMUO5JEmSlDFDuSRJkpQxQ7kkSZKUMUO5JEmSlDFDuSRJkpQxQ7kk\nSZKUMUO5JEmSlDFDuSRJkpQxQ7kkSZKUMUO5JEmSlDFDuSRJkpQxQ7kkSZKUMUO5JEmSlDFDuSRJ\nkpQxQ7kkSZKUMUO5JEmSlDFDuSRJkpQxQ7kkSZKUMUO5JEmSlDFDuSRJkpQxQ7kkSZKUsfYcyocD\nHwLLgb8Ch2bbHEmSJKll2msoPxMYBYwA9gJeAZ4Gts2yUZIkSVJLtNdQfhVwH3Av8B5wBfAJcFmW\njVL7UF1dnXUT1AZ5XKgQjwsV4nGhNLTHUN4D2Ad4Nq/8WWBo+Zuj9sZ/pirE40KFeFyoEI8LpaE9\nhvJ+QFdgbl55DTCg/M2RJEmSWqc9hnJJkiSpQ6nIugEt0ANYCpwFPJEovwvYHTgyUfYBsGP5miZJ\nkqROaBqwU9aNyMKrwOi8sn8AP82gLZIkSVKn9E1gJfAdYDfgdmARTokoSZIkldVlhC8PWgG8gV8e\nJEmSJEmSJEnqjIYTesuXA3+l6d7yIcAEYBkwG/hRqq1TVppzXFQCvwM+JlxAPAW4MOX2qfya+78i\ntjOwOLqp42nJcXEl8C7hU9qPgZGptU5Zae5x8Q3CtW6LgM+Apwj/O9RxHA78npAd64BhRTynU2XO\nM4FVhHHluwB3EN441zeuvC/wKfDfhFlaTiP8AV2VektVTs09Ln4A/AQ4GNgeuBRYDZyddkNVNs09\nJmI9gInAHwn/K9SxtOS4uJXwLdInEP5ffAU4LtVWqtyae1zsFNX/OTCIcEyMA95PvaUqp68DIwjZ\ncSlwfhP1O13mfI3CM7D8bD31LwMWAD0TZdcRzl7UcTT3uCjkUeDxkrVIWWvpMXEbcC+hR8Se8o6n\nucfFLoTwtUuajVLmmntcnA6soeEU00cSelM3LXnr1BYspulQ3qLM2V6/PKgHsA/wbF75s8DQ9Tzn\nYOAlwqwtyfpbAQNL3UBloiXHRSEbAfNL1ShlqqXHxPHR7V9pn9/noMa15Lg4CZhOGKownTC84X5g\n83SaqAy05Lh4GVgCXET4tvENgQuA1/F9pDNrUeZsr6G8H+Hgn5tXXgMMWM9zBhSoPzexTO1fS46L\nfP8EfBW4u4TtUnZackxsRfj9n0sYC6iOpyXHxSDCm+k3Cb1k5wG7An/AE7eOoiXHxSeEE7URhOsM\nFgB7EIY4qfNqUeZsr6G8JeqzboDavEOARwi9o3/NuC3KzkPALwlTrUqxLoSPos8D/hzdzgMOAPbL\nsF3K1iDChZ33EY6DSsLwht/gyVpn1qLM2V5D+edALdA/r7w/4ay1kE9Z9+ykf2KZ2r+WHBexQ4H/\nJVwdnT+eUO1XS46JI4EfEy74XQ38F9Anuv/P6TRTZdaS4+ITwtjhDxJlH0Tr2a7UDVQmWnJcXALM\nAr5PmL3rJeBbwBGEIQzqnFqUOdtrKF9FmBXhmLzyrwGvrOc5fwEOo+Gg+68Bc4CPSt1AZaIlxwWE\nqY7+lxDE7kinacpIS46JwYQZFOLbvxOmRvsKXgDcUbTkuPgz0I3QMxobRBju4HtIx9CS46KCcFFn\nUvy4vWYstV6ny5zfJAyg/w6wG3A7YbqZeNqikcBzifp9CWe6YwnjvU4FFgLfK1N7VR7NPS4qCdMb\n3Ug4ix0Q3bx4q+No7jGR7wKcfaUjau5xUUEY1lYN7AXsTZiDuLETfrU/zT0uDiX0rv+IMDf5PoQp\nEWcAvcvSYpVDH8Lf/V6EzPCj6L6ZM+EywhXwKwjjP5MT/N9HuEI+aTDhn+hywtlKh57IvRNrznFx\nH+Efal3eLf/YUfvW3P8VSRfgPOUdVXOPiwGEscKLCBdtPYQn8B1Rc4+L0wknbIsJx8VThIuA1XFU\nkssHycwwJlpu5pQkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkScpM\nt6wbIEntVZesGyBJKrnzgc+BHnnljwC/i+6fAEwElgPTgRFA90TdbwFvAIuAucBvgK0SyyuBOuDr\nwOvASuCYEm6DJEmS1K71AuYDZyTKNgKWEsL4scBCYBiwAyFgvwvcnKh/IXAcsD2wP/ACMCGxvJIQ\nyqcAR0f1+pV2MyRJkqT27U7g6cTjy4CPga7Ai8B1efVPBhY3sr5dCSE87i2vjB6fUoK2SpIkSR3S\nnsAaciH6DWBkdH8pYdjK4sRtKVAL9I/q7EMY6jKDMIRlMSGEHxQtr4web5veJkiSJEnt3+uEHvHB\nhAC9c1S+DPg+MKjArSvQB/iMMAb9UODLwCHROg6P1lEZPd40/c2QpI7PK+UlqeO6B7iGMNb7z8D7\nUfkkYDfCBZ6F7ApsBvwQ+CgqG5xeMyVJkqSOawPCsJMVhIs6Y8cAq4AbCGF7V+B04MZo+eaE4S2/\nIPSeHw+8jT3lkiRJUouMARYAvfPKv0a44HMpYSaW14HhieXfBD4ghPNXCUG+loahvBZDuSRJktSk\np4HRWTdCkiRJ6ow2AU4kzMCye8ZtkSRJkjqlGYRhK/8v43ZIkiRJkiRJkiRJkiRJkiRJkiRJkiRJ\nkiRJkiRJkiRJktqm/wOf9Md2BxBzogAAAABJRU5ErkJggg==\n",
       "text": [
        "<matplotlib.figure.Figure at 0xcad3940>"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Plot the **Sim** vs. **obs** monthly **coliform conc**"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ssim = pd.Series(FsimOther, index=Fsimdate)\n",
      "sobs = pd.Series(FobsOther, index=Fobsdate)\n",
      "\n",
      "fig=plt.figure(figsize=(12,5),dpi=400)\n",
      "ax = plt.subplot()\n",
      "fig.text(0.7, 0.8, r'$R^2=%.2f$' % r2_col, fontsize=15)\n",
      "title('coliform concentration (calibration, 2002-2008)' , fontsize=14., y=1.05, fontweight='bold')\n",
      "plt.ylabel('conc. (1000 CFU/100ml)', fontsize=14.)\n",
      "plt.xlabel('year', fontsize=14.)\n",
      "plt.ylim([0,10])\n",
      "plt.tick_params(axis='both', which='major', labelsize=14)\n",
      "# s=square, -=dash, g^=triangle\n",
      "# s=square, -=dash, g^=triangle\n",
      "ssim['1998':'2008'].plot(label='Sim', color ='red', linewidth=2)\n",
      "sobs['1998':'2008'].plot(label='Obs', color ='blue', style='-o', markersize=4)\n",
      "\n",
      "# Plot the error bar for selected data (greater values than a threshold)\n",
      "c = []\n",
      "d = []\n",
      "e = []\n",
      "f = []\n",
      "for i in range(len(FsimSed)):\n",
      "    if (FsimSed[i] > 20 or FobsSed[i] > 20):\n",
      "        f.append(Fsimdate[i])\n",
      "        c.append(FsimOther[i])\n",
      "        d.append(FsimOtherPost[i]) \n",
      "        e.append(FsimOtherPre[i])\n",
      "a = c - pd.DataFrame([d, c, e]).min()\n",
      "b = pd.DataFrame([d, c, e]).max() - c\n",
      "\n",
      "errorbar(f, c, yerr=[a, b], fmt=None, ecolor='grey', lw=8, capsize=3, capthick=2)\n",
      "\n",
      "grid(True)\n",
      "#tight_layout()\n",
      "ax.legend(loc='best')\n",
      "\n",
      "outputfilepath = str(mainpath) + '\\\\coliform_calibration.png'\n",
      "savefig(str(outputfilepath),dpi=500,format = 'png',transparent='True')\n",
      "##############################################################################################\n",
      "##############################################################################################\n",
      "#########################################Plot the CDF#########################################\n",
      "##############################################################################################\n",
      "fig=plt.figure(figsize=(7,5),dpi=400)\n",
      "ax = plt.subplot()\n",
      "n = len(sobs)\n",
      "# log-normal probability plot\n",
      "d = np.linspace(1, n, num=n)/(n+1)\n",
      "y  = norm.ppf(d,0,1);\n",
      "\n",
      "\n",
      "junk = FsimOther + FsimOtherPre + FsimOtherPost\n",
      "nn = len(junk)\n",
      "dd = np.linspace(1, nn, num=nn)/(nn+1)\n",
      "yy  = norm.ppf(dd,0,1);\n",
      "\n",
      "# create the axis ticks\n",
      "p  = [0.001, 0.01, 0.05, 0.2, 0.5, 0.75, 0.90, 0.98, 0.999];\n",
      "# relate var \"p\" with \"y\"\n",
      "tick  = norm.ppf(p,0,1);\n",
      "label = ['0.001','0.01','0.05','0.2','0.5','0.75','0.90','0.98','0.999'];\n",
      "# recast the p to (0,1)\n",
      "\n",
      "# sort the data in an ascending order\n",
      "ssim.sort()\n",
      "sobs.sort()\n",
      "junk.sort()\n",
      "# plot with simulation points that align with the obs\n",
      "#ax.plot(y, ssim, 'r+', label='sim')\n",
      "# plot with all points within 9-hour interval of obs collection time.\n",
      "ax.plot(yy, junk, 'r+', label='sim')\n",
      "ax.plot(y, sobs,'b*', label='obs')\n",
      "\n",
      "# use numpoints option so the markeres don't appear twice in one legend\n",
      "ax.legend(loc=(0.05,0.8),numpoints = 1)\n",
      "plt.ylabel('conc. (1000 CFU/100ml)', fontsize=12.)\n",
      "plt.xlabel('cumulative prob.', fontsize=12.)\n",
      "ax = gca()\n",
      "ax.xaxis.set_major_locator(ticker.FixedLocator(tick))\n",
      "ax.xaxis.set_major_formatter(ticker.FixedFormatter(label))\n",
      "grid(True)\n",
      "\n",
      "# save the figure to the folder\n",
      "outputfilepath = str(mainpath) + '\\\\coliform_calibration_cdf.png'\n",
      "savefig(str(outputfilepath),dpi=500,format = 'png',transparent='True')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0xcad3908>"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n/Fm3AAAAAElFTkSuQmCC\n",
       "text": [
        "<matplotlib.figure.Figure at 0x164cb4e0>"
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ssim = pd.Series(FsimOther, index=Fsimdate)\n",
      "sobs = pd.Series(FobsOther, index=Fobsdate)\n",
      "\n",
      "fig=plt.figure(figsize=(12,5),dpi=400)\n",
      "ax = plt.subplot()\n",
      "fig.text(0.7, 0.8, r'$R^2=%.2f$' % r2_col, fontsize=15)\n",
      "title('coliform validation (calibration, 1993-2002)' , fontsize=14., y=1.05, fontweight='bold')\n",
      "plt.ylabel('conc. (1000 CFU/100ml)', fontsize=14.)\n",
      "plt.xlabel('year', fontsize=14.)\n",
      "plt.tick_params(axis='both', which='major', labelsize=14)\n",
      "plt.ylim([0, 10])\n",
      "# s=square, -=dash, g^=triangle\n",
      "# s=square, -=dash, g^=triangle\n",
      "ssim['1993':'2001'].plot(label='Sim', color ='red', linewidth=2)\n",
      "sobs['1993':'2001'].plot(label='Obs', color ='blue', style='-o', markersize=4)\n",
      "\n",
      "# Plot the error bar for selected data (greater values than a threshold)\n",
      "c = []\n",
      "d = []\n",
      "e = []\n",
      "f = []\n",
      "for i in range(len(FsimSed)):\n",
      "    if (FsimSed[i] > 20 or FobsSed[i] > 20):\n",
      "        f.append(Fsimdate[i])\n",
      "        c.append(FsimOther[i])\n",
      "        d.append(FsimOtherPost[i]) \n",
      "        e.append(FsimOtherPre[i])\n",
      "a = c - pd.DataFrame([d, c, e]).min()\n",
      "b = pd.DataFrame([d, c, e]).max() - c\n",
      "\n",
      "errorbar(f, c, yerr=[a, b], fmt=None, ecolor='grey', lw=8, capsize=3, capthick=2)\n",
      "\n",
      "grid(True)\n",
      "#tight_layout()\n",
      "ax.legend(loc='best')\n",
      "\n",
      "outputfilepath = str(mainpath) + '\\\\coliform_validation.png'\n",
      "savefig(str(outputfilepath),dpi=500,format = 'png',transparent='True')\n",
      "##############################################################################################\n",
      "##############################################################################################\n",
      "#########################################Plot the CDF#########################################\n",
      "##############################################################################################\n",
      "fig=plt.figure(figsize=(7,5),dpi=400)\n",
      "ax = plt.subplot()\n",
      "n = len(sobs)\n",
      "# log-normal probability plot\n",
      "d = np.linspace(1, n, num=n)/(n+1)\n",
      "y  = norm.ppf(d,0,1);\n",
      "\n",
      "\n",
      "junk = FsimOther + FsimOtherPre + FsimOtherPost\n",
      "nn = len(junk)\n",
      "dd = np.linspace(1, nn, num=nn)/(nn+1)\n",
      "yy  = norm.ppf(dd,0,1);\n",
      "\n",
      "# create the axis ticks\n",
      "p  = [0.001, 0.01, 0.05, 0.2, 0.5, 0.75, 0.90, 0.98, 0.999];\n",
      "# relate var \"p\" with \"y\"\n",
      "tick  = norm.ppf(p,0,1);\n",
      "label = ['0.001','0.01','0.05','0.2','0.5','0.75','0.90','0.98','0.999'];\n",
      "# recast the p to (0,1)\n",
      "\n",
      "# sort the data in an ascending order\n",
      "ssim.sort()\n",
      "sobs.sort()\n",
      "junk.sort()\n",
      "# plot with simulation points that align with the obs\n",
      "#ax.plot(y, ssim, 'r+', label='sim')\n",
      "# plot with all points within 9-hour interval of obs collection time.\n",
      "ax.plot(yy, junk, 'r+', label='sim')\n",
      "ax.plot(y, sobs,'b*', label='obs')\n",
      "\n",
      "# use numpoints option so the markeres don't appear twice in one legend\n",
      "ax.legend(loc=(0.05,0.8),numpoints = 1)\n",
      "plt.ylabel('conc. (1000 CFU/100ml)', fontsize=12.)\n",
      "plt.xlabel('cumulative prob.', fontsize=12.)\n",
      "ax = gca()\n",
      "ax.xaxis.set_major_locator(ticker.FixedLocator(tick))\n",
      "ax.xaxis.set_major_formatter(ticker.FixedFormatter(label))\n",
      "grid(True)\n",
      "\n",
      "# save the figure to the folder\n",
      "outputfilepath = str(mainpath) + '\\\\coliform_validation_cdf.png'\n",
      "savefig(str(outputfilepath),dpi=500,format = 'png',transparent='True')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Plot the time series of **total phosphorous concentrations**. "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ssim = pd.Series(FsimTP, index=Fsimdate)\n",
      "sobs = pd.Series(FobsTP, index=Fobsdate)\n",
      "\n",
      "fig=plt.figure(figsize=(12,5),dpi=400)\n",
      "ax = plt.subplot()\n",
      "fig.text(0.7, 0.8, r'$R^2=%.2f$' % r2_TP, fontsize=16)\n",
      "#fig.text(0.87, 0.85, \"A\", fontsize=18)\n",
      "title('TP concentration (calibration, 2002-2008)', fontsize=14., y=1.05, fontweight='bold')\n",
      "plt.ylabel('conc. (mg/l)', fontsize=14.)\n",
      "plt.xlabel('year', fontsize=14.)\n",
      "plt.tick_params(axis='both', which='major', labelsize=14)\n",
      "pylab.ylim([0, 0.3])\n",
      "\n",
      "# s=square, -=dash, g^=triangle\n",
      "ssim['2002':'2008'].plot(label='Sim', color ='red', linewidth=2)\n",
      "sobs['2002':'2008'].plot(label='Obs', color ='blue', style='-o', markersize=4)\n",
      "\n",
      "# Plot the error bar for selected data (greater values than a threshold)\n",
      "c = []\n",
      "d = []\n",
      "e = []\n",
      "f = []\n",
      "for i in range(len(FsimSed)):\n",
      "    if (FsimTP[i] > 0.1 or FobsTP[i] > 0.1):\n",
      "        f.append(Fsimdate[i])\n",
      "        c.append(FsimTP[i])\n",
      "        d.append(FsimTPPost[i]) \n",
      "        e.append(FsimTPPre[i])\n",
      "a = c - pd.DataFrame([d, c, e]).min()\n",
      "b = pd.DataFrame([d, c, e]).max() - c\n",
      "\n",
      "errorbar(f, c, yerr=[a, b], fmt=None, ecolor='grey', lw=8, capsize=3, capthick=2)\n",
      "grid(True)\n",
      "#tight_layout()\n",
      "ax.legend(loc='best')\n",
      "outputfilepath = str(mainpath) + '\\\\TP_calibration.png'\n",
      "savefig(str(outputfilepath),dpi=500,format = 'png',transparent='True')\n",
      "plt.show()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0xcad0ac8>"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "fig=plt.figure(figsize=(7,5),dpi=400)\n",
      "ax = plt.subplot()\n",
      "n = len(sobs)\n",
      "# log-normal probability plot\n",
      "d = np.linspace(1, n, num=n)/(n+1)\n",
      "y  = norm.ppf(d,0,1);\n",
      "\n",
      "\n",
      "junk = FsimTP + FsimTPPre + FsimTPPost\n",
      "nn = len(junk)\n",
      "dd = np.linspace(1, nn, num=nn)/(nn+1)\n",
      "yy  = norm.ppf(dd,0,1);\n",
      "\n",
      "# create the axis ticks\n",
      "p  = [0.001, 0.01, 0.05, 0.2, 0.5, 0.75, 0.90, 0.98, 0.999];\n",
      "# relate var \"p\" with \"y\"\n",
      "tick  = norm.ppf(p,0,1);\n",
      "label = ['0.001','0.01','0.05','0.2','0.5','0.75','0.90','0.98','0.999'];\n",
      "# recast the p to (0,1)\n",
      "\n",
      "# sort the data in an ascending order\n",
      "ssim.sort()\n",
      "sobs.sort()\n",
      "junk.sort()\n",
      "# plot with simulation points that align with the obs\n",
      "#ax.plot(y, ssim, 'r+', label='sim')\n",
      "# plot with all points within 9-hour interval of obs collection time.\n",
      "ax.plot(yy, junk, 'r+', label='sim')\n",
      "ax.plot(y, sobs,'b*', label='obs')\n",
      "\n",
      "# use numpoints option so the markeres don't appear twice in one legend\n",
      "ax.legend(loc=(0.05,0.8),numpoints = 1)\n",
      "plt.ylabel('conc. (mg/l)', fontsize=12.)\n",
      "plt.xlabel('cumulative prob.', fontsize=12.)\n",
      "ax = gca()\n",
      "ax.xaxis.set_major_locator(ticker.FixedLocator(tick))\n",
      "ax.xaxis.set_major_formatter(ticker.FixedFormatter(label))\n",
      "grid(True)\n",
      "# save the figure to the folder\n",
      "outputfilepath = str(mainpath) + '\\\\TP_calibration_cdf.png'\n",
      "savefig(str(outputfilepath),dpi=500,format = 'png',transparent='True')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ssim = pd.Series(FsimTP, index=Fsimdate)\n",
      "sobs = pd.Series(FobsTP, index=Fobsdate)\n",
      "\n",
      "fig=plt.figure(figsize=(12,5),dpi=400)\n",
      "ax = plt.subplot()\n",
      "fig.text(0.7, 0.8, r'$R^2=%.2f$' % r2_TP, fontsize=16)\n",
      "#fig.text(0.87, 0.85, \"A\", fontsize=18)\n",
      "title('TP concentration (validation, 1993-2001)', fontsize=14., y=1.05, fontweight='bold')\n",
      "plt.ylabel('conc. (mg/l)', fontsize=14.)\n",
      "plt.xlabel('year', fontsize=14.)\n",
      "plt.tick_params(axis='both', which='major', labelsize=14)\n",
      "pylab.ylim([0, 1])\n",
      "\n",
      "# s=square, -=dash, g^=triangle\n",
      "ssim['1993':'2001'].plot(label='Sim', color ='red', linewidth=2)\n",
      "sobs['1993':'2001'].plot(label='Obs', color ='blue', style='-o', markersize=4)\n",
      "\n",
      "# Plot the error bar for selected data (greater values than a threshold)\n",
      "c = []\n",
      "d = []\n",
      "e = []\n",
      "f = []\n",
      "for i in range(len(FsimSed)):\n",
      "    if (FsimTP[i] > 0.08 or FobsTP[i] > 0.08):\n",
      "        f.append(Fsimdate[i])\n",
      "        c.append(FsimTP[i])\n",
      "        d.append(FsimTPPost[i]) \n",
      "        e.append(FsimTPPre[i])\n",
      "a = c - pd.DataFrame([d, c, e]).min()\n",
      "b = pd.DataFrame([d, c, e]).max() - c\n",
      "\n",
      "errorbar(f, c, yerr=[a, b], fmt=None, ecolor='grey', lw=8, capsize=3, capthick=2)\n",
      "\n",
      "grid(True)\n",
      "#tight_layout()\n",
      "ax.legend(loc='best')\n",
      "outputfilepath = str(mainpath) + '\\\\TP_validation.png'\n",
      "savefig(str(outputfilepath),dpi=500,format = 'png',transparent='True')\n",
      "plt.show()\n",
      "#################################################################################################\n",
      "fig=plt.figure(figsize=(7,5),dpi=400)\n",
      "ax = plt.subplot()\n",
      "n = len(sobs)\n",
      "# log-normal probability plot\n",
      "d = np.linspace(1, n, num=n)/(n+1)\n",
      "y  = norm.ppf(d,0,1);\n",
      "\n",
      "\n",
      "junk = FsimTP + FsimTPPre + FsimTPPost\n",
      "nn = len(junk)\n",
      "dd = np.linspace(1, nn, num=nn)/(nn+1)\n",
      "yy  = norm.ppf(dd,0,1);\n",
      "\n",
      "# create the axis ticks\n",
      "p  = [0.001, 0.01, 0.05, 0.2, 0.5, 0.75, 0.90, 0.98, 0.999];\n",
      "# relate var \"p\" with \"y\"\n",
      "tick  = norm.ppf(p,0,1);\n",
      "label = ['0.001','0.01','0.05','0.2','0.5','0.75','0.90','0.98','0.999'];\n",
      "# recast the p to (0,1)\n",
      "\n",
      "# sort the data in an ascending order\n",
      "ssim.sort()\n",
      "sobs.sort()\n",
      "junk.sort()\n",
      "# plot with simulation points that align with the obs\n",
      "#ax.plot(y, ssim, 'r+', label='sim')\n",
      "# plot with all points within 9-hour interval of obs collection time.\n",
      "ax.plot(yy, junk, 'r+', label='sim')\n",
      "ax.plot(y, sobs,'b*', label='obs')\n",
      "pylab.ylim([0, 1])\n",
      "\n",
      "# use numpoints option so the markeres don't appear twice in one legend\n",
      "ax.legend(loc=(0.05,0.8),numpoints = 1)\n",
      "plt.ylabel('conc. (mg/l)', fontsize=12.)\n",
      "plt.xlabel('cumulative prob.', fontsize=12.)\n",
      "ax = gca()\n",
      "ax.xaxis.set_major_locator(ticker.FixedLocator(tick))\n",
      "ax.xaxis.set_major_formatter(ticker.FixedFormatter(label))\n",
      "grid(True)\n",
      "\n",
      "# save the figure to the folder\n",
      "outputfilepath = str(mainpath) + '\\\\TP_validation_cdf.png'\n",
      "savefig(str(outputfilepath),dpi=500,format = 'png',transparent='True')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}